type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  signinUser(data: SignInUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
}

type Query {
  getUsers: [User]!
  getCurrentUser(storiesPage: Int): User!
}

type User {
  uuid: ID!
  email: String!
  username: String!
  stories: PaginatedStories!
  created_at: DateTime!
  updated_at: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

type PaginatedStories {
  results: [Story]!
  total: Int!
  currentPage: Int!
}

input CreateUserInput {
  email: String!
  username: String!
  password: String!
}

input UpdateUserInput {
  email: String
  username: String
  password: String
}

input SignInUserInput {
  email: String!
  password: String!
}
